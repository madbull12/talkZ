type TalkZ_post {
  body: String
  created_at: DateTime
  id: ID!
  image: String
  subtalkz_id: ID
  user_id: ID
  talkZ_subtalkz: TalkZ_subtalkz
    @materializer(
      query: "getTalkZ_subtalkz"
      arguments: [{ name: "id", field: "subtalkz_id" }]
    )
  talkZ_user: Talkz_user
    @materializer(
      query: "getTalkz_user"
      arguments: [{ name: "id", field: "user_id" }]
    )
  talkz_commentList: [Talkz_comment]
    @materializer(
      query: "getTalkz_commentUsingPost_id"
      arguments: [{ name: "post_id", field: "id" }]
    )
  talkz_voteList: [Talkz_vote]
    @materializer(
      query: "getTalkz_voteUsingPost_id"
      arguments: [{ name: "post_id", field: "id" }]
    )
  title: String
  username: String
}

type TalkZ_subtalkz {
  created_at: DateTime
  id: ID!
  talkZ_postList: [TalkZ_post]
    @materializer(
      query: "getTalkZ_postUsingSubtalkz_id"
      arguments:[{ name:"subtalkz_id",field:"id" }]
    )
  topic: String
}

type Talkz_comment {
  created_at: DateTime
  id: ID!
  post_id: ID
  talkZ_post: TalkZ_post
    @materializer(
      query: "getTalkZ_post"
      arguments: [{ name: "id", field: "post_id" }]
    )
  user_id: ID
  talkZ_user: Talkz_user
    @materializer(
      query: "getTalkz_user"
      arguments: [{ name: "id", field: "user_id" }]
    )

  text: String
  username: String
}

type Talkz_vote {
  created_at: DateTime
  id: ID!
  post_id: ID
  talkZ_post: TalkZ_post
    @materializer(
      query: "getTalkZ_post"
      arguments: [{ name: "id", field: "post_id" }]
    )
  user_id: ID
  talkZ_user: Talkz_user
    @materializer(
      query: "getTalkz_user"
      arguments: [{ name: "id", field: "user_id" }]
    )
  upvote: Boolean
  username: String
}

type Talkz_user {
  created_at: DateTime
  id: ID!
  email: String
  name: String
  image: String
}

type Query {
  getTalkZ_postList: [TalkZ_post]
    @dbquery(
      type: "postgresql"

      query: """
        select * from "talkZ_post" ORDER by "created_at" desc
      """
      configuration: "postgresql_config"
    )
  getTalkZ_post(id: ID!): TalkZ_post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "talkZ_post"
      configuration: "postgresql_config"
    )
  getTalkz_commentUsingPost_id(id: ID!): [Talkz_comment]
    @dbquery(
      type: "postgresql"
      query: """
      select * from "talkz_comment" where "post_id" = $1
      """
      configuration: "postgresql_config"
    )

  getTalkz_voteUsingPost_id(id: ID!): [Talkz_vote]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT * from talkz_vote WHERE "post_id" = $1
      order by "created_at" desc
      """
      configuration: "postgresql_config"
    )
  getTalkZ_subtalkzList: [TalkZ_subtalkz]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "talkZ_subtalkz"
      configuration: "postgresql_config"
    )
  getTalkZ_subtalkzListByLimit(limit: Int!): [TalkZ_subtalkz]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select * from "talkZ_subtalkz" limit $1
      """
      configuration: "postgresql_config"
    )

  getTalkz_subtalkzListbyTopic(topic: String!): [TalkZ_subtalkz]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select * from "talkZ_subtalkz" where "topic" = $1
      """
      configuration: "postgresql_config"
    )

  getTalkZ_subtalkz(id: ID!): TalkZ_subtalkz
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "talkZ_subtalkz"
      configuration: "postgresql_config"
    )
  getTalkZ_postUsingSubtalkz_id(id: ID!): [TalkZ_post]
    @dbquery(
      type: "postgresql"
      query: """
      SELECT T."body", T."created_at", T."id", T."image", T."subtalkz_id", T."title", T."username"
        FROM "public"."talkZ_post" T
        WHERE T."subtalkz_id" = $1
      """
      configuration: "postgresql_config"
    )
  getTalkZ_postListByTopic(topic: String!): [TalkZ_post]
    @dbquery(
      type: "postgresql"
      query: """
      select *,"talkZ_post".id as id from "talkZ_post"
      inner join "talkZ_subtalkz" on "talkZ_subtalkz"."id" = "talkZ_post"."subtalkz_id"
      where "talkZ_subtalkz"."topic" = $1
      order by "talkZ_post"."created_at" desc
      """
      configuration: "postgresql_config"
    )
  getTalkz_commentList: [Talkz_comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "talkz_comment"
      configuration: "postgresql_config"
    )
  getTalkz_comment(id: ID!): Talkz_comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "talkz_comment"
      configuration: "postgresql_config"
    )
  getTalkz_voteList: [Talkz_vote]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "talkz_vote"
      configuration: "postgresql_config"
    )
  getTalkz_vote(id: ID!): Talkz_vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "talkz_vote"
      configuration: "postgresql_config"
    )

  getTalkz_user(id: ID!): Talkz_user
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "talkz_user"
      configuration: "postgresql_config"
    )

  getTalkz_userByEmail(email: String!): Talkz_user
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      select * from "talkz_user" where "email" = $1
      """
      configuration: "postgresql_config"
    )
}

"""
These are some examples of mutations generated from the schema. Feel free to modify them or add your own.
"""
type Mutation {
  insertTalkZ_post(
    image: String!
    subtalkz_id: ID!
    body: String!
    title: String!
    username: String!
    user_id: ID!
  ): TalkZ_post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "talkZ_post"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteTalkZ_post(id: ID!): TalkZ_post
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "talkZ_post"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertTalkZ_subtalkz(topic: String!): TalkZ_subtalkz
    @dbquery(
      type: "postgresql"
      table: "talkZ_subtalkz"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteTalkZ_subtalkz(id: ID!): TalkZ_subtalkz
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "talkZ_subtalkz"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertTalkz_comment(
    post_id: ID!
    text: String!
    username: String!
    user_id: ID!
  ): Talkz_comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "talkz_comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteTalkz_comment(id: ID!): Talkz_comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "talkz_comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertTalkz_vote(
    post_id: ID!
    upvote: Boolean!
    username: String!
    user_id: ID!
  ): Talkz_vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "talkz_vote"
      dml: INSERT
      configuration: "postgresql_config"
    )
  deleteTalkz_vote(id: ID!): Talkz_vote
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "talkz_vote"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertTalkz_user(name: String!, email: String!, image: String!): Talkz_user
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "talkz_user"
      dml: INSERT
      configuration: "postgresql_config"
    )
}
